import telegram
import time
import pandas as pd
import random
from collections import deque
import requests # Live Data Fetching ‡∑É‡∂≥‡∑Ñ‡∑è ‡∂Ö‡∂Ω‡∑î‡∂≠‡∑í‡∂±‡∑ä ‡∂ë‡∂ö‡∑ä ‡∂ö‡∂ª‡∂± ‡∂Ω‡∂Ø‡∑í
from bs4 import BeautifulSoup # Live Data Fetching ‡∑É‡∂≥‡∑Ñ‡∑è ‡∂Ö‡∂Ω‡∑î‡∂≠‡∑í‡∂±‡∑ä ‡∂ë‡∂ö‡∑ä ‡∂ö‡∂ª‡∂± ‡∂Ω‡∂Ø‡∑í

# --- ‚ö†Ô∏è ‡∂î‡∂∂ ‡∑Ä‡∑í‡∑É‡∑í‡∂±‡∑ä ‡∑Ä‡∑ô‡∂±‡∑É‡∑ä ‡∂ö‡∑Ö ‡∂∫‡∑î‡∂≠‡∑î ‡∂ö‡∑ú‡∂ß‡∑É ---

# BotFather ‡∂ú‡∑ô‡∂±‡∑ä ‡∂Ω‡∂∂‡∑è‡∂ú‡∂≠‡∑ä ‡∂î‡∂∂‡∂ú‡∑ö Token ‡∂ë‡∂ö
BOT_TOKEN = '8382727460:AAEgKVISJN5TTuV4O-82sMGQDG3khwjiKR8' 

# ‡∂î‡∂∂‡∂ú‡∑ö Channel ‡∂ë‡∂ö‡∑ö Username ‡∑Ñ‡∑ù Chat ID ‡∂ë‡∂ö
# (‡∂ã‡∂Ø‡∑è: @MySignalChannel, ‡∂±‡∑ê‡∂≠‡∑í‡∂±‡∂∏‡∑ä -123456789 ‡∑Ä‡∑ê‡∂±‡∑í ‡∂Ö‡∂Ç‡∂ö‡∂∫‡∂ö‡∑ä)
CHANNEL_ID = '-1003111341307' 

# -------------------------------------


# --- 1. Live Data ‡∂Ω‡∂∂‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∑ö ‡∑Å‡∑ä‚Äç‡∂ª‡∑í‡∂≠‡∂∫ (Web Scraping Logic) ---

def get_latest_crash_data(num_rounds=10):
    """
    Aviator ‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂©‡∑è‡∑Ä‡∑ö ‡∂¥‡∑É‡∑î‡∂ú‡∑í‡∂∫ ‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∂µ‡∂Ω (Multipliers) ‡∂Ω‡∂∂‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂∫‡∑í.
    ‡∂∏‡∑ô‡∂∫ HTML Scraping ‡∂∏‡∂≠ ‡∂¥‡∂Ø‡∂±‡∂∏‡∑ä ‡∑Ä‡∑ñ‡∑Ä‡∂ö‡∑í.
    """
    
    # ‡∂î‡∂∂‡∂ú‡∑ö ‡∂≠‡∑í‡∂ª ‡∂ª‡∑ñ‡∑Ä‡∑ö ‡∂á‡∂≠‡∑í URL ‡∂ë‡∂ö
    TARGET_URL = 'https://lk.1xbet.com/en/casino-search?game=52358' 
    
    headers = {
        # Browser ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂Ω‡∑ô‡∑É ‡∂¥‡∑ô‡∂±‡∑ì ‡∑É‡∑í‡∂ß‡∑ì‡∂∏ ‡∑É‡∂≥‡∑Ñ‡∑è (‡∑Ä‡∑ô‡∂∂‡∑ä ‡∂Ö‡∂©‡∑Ä‡∑í ‡∂∏‡∂ü‡∑í‡∂±‡∑ä ‡∂∂‡∑ú‡∂ß‡∑ä‡∂Ω‡∑è‡∑Ä Block ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ ‡∑Ä‡∑ê‡∂Ω‡∑ê‡∂ö‡∑ä‡∑Ä‡∑ì‡∂∏‡∂ß)
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
    }

    try:
        # ‡∑É‡∂ß‡∑Ñ‡∂±: ‡∂∂‡∑ú‡∑Ñ‡∑ù Aviator ‡∑É‡∂∫‡∑í‡∂ß‡∑ä ‡∑Ä‡∂Ω ‡∂Ø‡∂≠‡∑ä‡∂≠ Load ‡∑Ä‡∂±‡∑ä‡∂±‡∑ö JavaScript ‡∂∏‡∂ü‡∑í‡∂±‡∑ä ‡∂±‡∑í‡∑É‡∑è, 
        # ‡∑É‡∂ª‡∂Ω requests.get() ‡∂Ö‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö ‡∑Ä‡∑í‡∂∫ ‡∑Ñ‡∑ê‡∂ö.
        response = requests.get(TARGET_URL, headers=headers, timeout=10)
        response.raise_for_status() 

        soup = BeautifulSoup(response.text, 'html.parser')
        
        # ‚ö†Ô∏è HTML Class ‡∂±‡∑è‡∂∏‡∂∫ ‡∂â‡∂≠‡∑è ‡∂±‡∑í‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í‡∑Ä ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂±. 
        # ‡∂∏‡∑ô‡∂∫ ‡∂î‡∂∂‡∂ú‡∑ö ‡∂≠‡∑í‡∂ª ‡∂ª‡∑ñ‡∑Ä‡∑ö ‡∂≠‡∑í‡∂∂‡∑ñ ‡∂±‡∂∏‡∂ö‡∑í. ‡∂ë‡∂∫ ‡∑Ä‡∑ô‡∂±‡∑É‡∑ä ‡∑Ä‡∑ì ‡∂≠‡∑í‡∂∂‡∑í‡∂∫ ‡∑Ñ‡∑ê‡∂ö.
        # ‡∑É‡∂¢‡∑ì‡∑Ä‡∑ì ‡∂Ø‡∂≠‡∑ä‡∂≠ ‡∂Ω‡∂∂‡∑è‡∂Ø‡∑ô‡∂± API ‡∂ë‡∂ö‡∂ö‡∑ä ‡∑É‡∑ú‡∂∫‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏ ‡∑Ä‡∂©‡∑è ‡∑Ñ‡∑ú‡∂≥‡∂∫.
        multiplier_elements = soup.find_all('div', class_='payout-ng-star-inserted') 
        
        crash_results = []
        for element in multiplier_elements:
            try:
                # 'x' ‡∂Ω‡∂ö‡∑î‡∂´ ‡∂â‡∑Ä‡∂≠‡∑ä ‡∂ö‡∂ª float ‡∂Ö‡∂ú‡∂∫‡∂ö‡∑ä ‡∂Ω‡∑ô‡∑É ‡∂Ω‡∂∂‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏
                multiplier_text = element.text.strip().replace('x', '')
                multiplier_value = float(multiplier_text)
                crash_results.append(multiplier_value)
            except ValueError:
                continue 
        
        # ‡∑Ä‡∂©‡∑è‡∂≠‡∑ä ‡∂¥‡∑ê‡∂ª‡∂´‡∑í ‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∂µ‡∂Ω ‡∂∏‡∑î‡∂Ω‡∑í‡∂±‡∑ä‡∂∏ ‡∂ë‡∂± ‡∂±‡∑í‡∑É‡∑è, ‡∂±‡∑Ä‡∂≠‡∂∏ ‡∂í‡∑Ä‡∑è ‡∂Ö‡∂ú‡∑í‡∂±‡∑ä ‡∂≠‡∑í‡∂∂‡∑ì‡∂∏‡∂ß ‡∂â‡∂© ‡∂á‡∂≠.
        # ‡∂Ö‡∂¥‡∑í ‡∂Ω‡∑ê‡∂∫‡∑í‡∑É‡∑ä‡∂≠‡∑î‡∑Ä ‡∂Ü‡∂¥‡∑É‡∑î ‡∑Ñ‡∂ª‡∑Ä‡∑è, ‡∂±‡∑Ä‡∂≠‡∂∏ ‡∂í‡∑Ä‡∑è ‡∂∏‡∑î‡∂Ω‡∂ß ‡∂ú‡∂±‡∑ä‡∂±‡∑ô‡∂∏‡∑î.
        return crash_results[::-1][:num_rounds]
        
    except requests.exceptions.RequestException as e:
        print(f"[{time.strftime('%H:%M:%S')}] ERROR: Live data fetching failed (Check URL/Network): {e}")
        return []


# --- 2. Martingale ‡∂ã‡∂¥‡∑è‡∂∫ ‡∂∏‡∑è‡∂ª‡∑ä‡∂ú‡∂∫ ‡∑Ä‡∑í‡∑Å‡∑ä‡∂Ω‡∑ö‡∑Ç‡∂´‡∂∫ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ ---

def analyze_and_generate_signal(historical_data, cashout_target=2.00):
    """
    ‡∂ì‡∂≠‡∑í‡∑Ñ‡∑è‡∑É‡∑í‡∂ö ‡∂Ø‡∂≠‡∑ä‡∂≠ ‡∑Ä‡∑í‡∑Å‡∑ä‡∂Ω‡∑ö‡∑Ç‡∂´‡∂∫ ‡∂ö‡∂ª Martingale ‡∑É‡∑í‡∂ú‡∑ä‡∂±‡∂Ω‡∂∫ ‡∂≠‡∑ì‡∂ª‡∂´‡∂∫ ‡∂ö‡∂ª‡∂∫‡∑í.
    """
    if not historical_data:
        return None, 0

    # ‡∂Ö‡∂õ‡∂´‡∑ä‡∂©‡∑Ä ‡∂â‡∂Ω‡∂ö‡∑ä‡∂ö‡∂∫ ‡∂Ö‡∑Ñ‡∑í‡∂∏‡∑í ‡∑Ä‡∑ñ ‡∑Ä‡∑è‡∂ª ‡∂ú‡∂´‡∂± ‡∂ú‡∂´‡∂±‡∂∫ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
    consecutive_losses = 0
    # ‡∂±‡∑Ä‡∂≠‡∂∏ ‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∂µ‡∂Ω‡∂∫ ‡∂∏‡∑î‡∂Ω‡∑í‡∂±‡∑ä‡∂∏ ‡∂ë‡∂± ‡∂∂‡∑ê‡∑Ä‡∑í‡∂±‡∑ä, ‡∂Ö‡∂¥‡∑í ‡∂Ω‡∑ê‡∂∫‡∑í‡∑É‡∑ä‡∂≠‡∑î‡∑Ä ‡∂Ø‡∑í‡∂ú‡∑ö ‡∂â‡∂Ø‡∑í‡∂ª‡∑í‡∂∫‡∂ß ‡∂∫‡∂∏‡∑î.
    for multiplier in historical_data:
        if multiplier < cashout_target:
            consecutive_losses += 1
        else:
            break
            
    if consecutive_losses >= 3:
        # ‡∂Ö‡∂õ‡∂´‡∑ä‡∂©‡∑Ä ‡∂¥‡∑è‡∂©‡∑î 3‡∂ö‡∑ä ‡∑Ñ‡∑ù ‡∂ä‡∂ß ‡∑Ä‡∑ê‡∂©‡∑í ‡∂¥‡∑ä‚Äç‡∂ª‡∂∏‡∑è‡∂´‡∂∫‡∂ö‡∑ä ‡∑É‡∑í‡∂Ø‡∑î‡∑Ä‡∑ì ‡∂á‡∂≠‡∑ä‡∂±‡∂∏‡∑ä, Martingale ‡∑É‡∑í‡∂ú‡∑ä‡∂±‡∂Ω‡∂∫ ‡∂±‡∑í‡∂ö‡∑î‡∂≠‡∑ä ‡∂ö‡∂ª‡∂∫‡∑í.
        
        # Martingale ‡∂î‡∂ß‡∑ä‡∂ß‡∑î ‡∂í‡∂ö‡∂ö‡∂∫: 2^(‡∂¥‡∑è‡∂©‡∑î ‡∑Ä‡∑è‡∂ª ‡∂ú‡∂´‡∂± - 1)
        # ‡∂ã‡∂Ø‡∑è: 3 ‡∂¥‡∑è‡∂©‡∑î = 4X ‡∂î‡∂ß‡∑ä‡∂ß‡∑î ‡∂í‡∂ö‡∂ö‡∂∫ (1, 2, 4)
        bet_multiplier = 2**(consecutive_losses - 1) 
        
        signal_text = (
            f"‚ùå ‡∂Ö‡∂õ‡∂´‡∑ä‡∂© ‡∂¥‡∑è‡∂©‡∑î: {consecutive_losses} ‡∑Ä‡∂≠‡∑è‡∑Ä‡∂ö‡∑ä ({cashout_target}X ‡∂ß ‡∂Ö‡∂©‡∑î‡∑Ä‡∑ô‡∂±‡∑ä)\n"
            f"üéØ ‡∂â‡∂Ω‡∂ö‡∑ä‡∂ö‡∂∫: {cashout_target}X\n"
            f"üí∞ ‡∂ä‡∑Ö‡∂ü ‡∂î‡∂ß‡∑ä‡∂ß‡∑î‡∑Ä: {bet_multiplier}X (‡∂¥‡∂Ø‡∂±‡∂∏‡∑ä ‡∂í‡∂ö‡∂ö‡∂∫‡∑ô‡∂±‡∑ä)"
        )
        return signal_text, bet_multiplier

    return None, 0 # ‡∑É‡∑í‡∂ú‡∑ä‡∂±‡∂Ω‡∑ä ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂±‡∑ú‡∂∏‡∑ê‡∂≠


# --- 3. ‡∂ß‡∑ô‡∂Ω‡∑í‡∂ú‡∑ä‚Äç‡∂ª‡∑ë‡∂∏‡∑ä ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂© ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏‡∑ö ‡∂ö‡∑è‡∂ª‡∑ä‡∂∫‡∂∫ ---

def send_telegram_message(bot_token, chat_id, message):
    """
    ‡∂ß‡∑ô‡∂Ω‡∑í‡∂ú‡∑ä‚Äç‡∂ª‡∑ë‡∂∏‡∑ä API ‡∑Ñ‡∂ª‡∑Ñ‡∑è ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫‡∂ö‡∑ä ‡∂∫‡∑Ä‡∂∫‡∑í.
    """
    try:
        bot = telegram.Bot(token=bot_token)
        bot.send_message(chat_id=chat_id, text=message, parse_mode=telegram.ParseMode.MARKDOWN)
    except telegram.error.Unauthorized:
        print("ERROR: Invalid Bot Token or Chat ID.")
    except Exception as e:
        print(f"ERROR sending Telegram message: {e}")


# --- 4. ‡∂¥‡∑ä‚Äç‡∂ª‡∂∞‡∑è‡∂± ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö ‡∑Å‡∑ä‚Äç‡∂ª‡∑í‡∂≠‡∂∫ ---

def main():
    if not BOT_TOKEN or not CHANNEL_ID:
        print("ERROR: ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª BOT_TOKEN ‡∑É‡∑Ñ CHANNEL_ID ‡∂±‡∑í‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í‡∑Ä ‡∑É‡∂ö‡∑É‡∂±‡∑ä‡∂±.")
        return

    # ‡∂¥‡∑É‡∑î‡∂ú‡∑í‡∂∫ ‡∑Ä‡∂ß 50 ‡∂ö ‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∂µ‡∂Ω ‡∂ú‡∂∂‡∂©‡∑è ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß
    historical_data = deque(maxlen=50) 
    CASH_OUT_TARGET = 2.00 # Martingale Target Multiplier
    
    print("Live Data Signal Bot Started...")
    print(f"Target Cashout Multiplier: {CASH_OUT_TARGET}X")
    
    # ‡∂Ö‡∑Ä‡∑É‡∂±‡∑ä ‡∑Ä‡∂ª‡∂ß ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∑Ö ‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∂µ‡∂Ω‡∂∫ ‡∂∏‡∂≠‡∂ö ‡∂≠‡∂∂‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß (‡∂Ø‡∂≠‡∑ä‡∂≠ ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏ ‡∑Ä‡∑ê‡∂Ω‡∑ê‡∂ö‡∑ä‡∑Ä‡∑ì‡∂∏‡∂ß)
    last_fetched_round = None 
    
    while True:
        try:
            # 1. ‡∑É‡∂¢‡∑ì‡∑Ä‡∑ì ‡∂Ø‡∂≠‡∑ä‡∂≠ ‡∂Ω‡∂∂‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏
            # ‡∂Ö‡∂¥‡∑í ‡∂Ø‡∑ê‡∂±‡∂ß ‡∂¥‡∑Ä‡∂≠‡∑í‡∂± ‡∂Ø‡∂≠‡∑ä‡∂≠ ‡∑É‡∑í‡∂∫‡∂Ω‡∑ä‡∂Ω ‡∂Ω‡∂∂‡∑è ‡∂ú‡∂±‡∑í‡∂∏‡∑î
            latest_results = get_latest_crash_data(num_rounds=15)
            
            if not latest_results:
                print(f"[{time.strftime('%H:%M:%S')}] No new data fetched. Retrying...")
                time.sleep(10)
                continue
            
            # 2. ‡∂±‡∑Ä ‡∂Ø‡∂≠‡∑ä‡∂≠ ‡∂¥‡∂∏‡∂´‡∂ö‡∑ä ‡∑Ñ‡∑É‡∑î‡∂ª‡∑î‡∑Ä‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏
            # ‡∂Ö‡∂¥‡∑í ‡∂Ø‡∂≠‡∑ä‡∂≠ ‡∂Ω‡∂∂‡∑è‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∑ö ‡∂ö‡∑ä‚Äç‡∂ª‡∂∏‡∂∫ ‡∑Ä‡∑ô‡∂±‡∑É‡∑ä ‡∂ö‡∑Ö ‡∂±‡∑í‡∑É‡∑è, historical_data ‡∂ë‡∂ö update ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.
            if last_fetched_round != latest_results[0]: # ‡∂Ö‡∂Ω‡∑î‡∂≠‡∑ä‡∂∏ ‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∂µ‡∂Ω‡∂∫ ‡∑Ä‡∑ô‡∂±‡∑É‡∑ä ‡∑Ä‡∑ì ‡∂á‡∂≠‡∑ä‡∂±‡∂∏‡∑ä
                
                # ‡∑É‡∂∏‡∑ä‡∂¥‡∑ñ‡∂ª‡∑ä‡∂´ ‡∂Ø‡∂≠‡∑ä‡∂≠ ‡∂Ω‡∑ê‡∂∫‡∑í‡∑É‡∑ä‡∂≠‡∑î‡∑Ä update ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
                historical_data.clear()
                historical_data.extend(latest_results)
                last_fetched_round = latest_results[0]
                current_multiplier = latest_results[0]
                
                # 3. ‡∂≠‡∂≠‡∑ä‡∂≠‡∑ä‡∑Ä ‡∑Ä‡∑è‡∂ª‡∑ä‡∂≠‡∑è‡∑Ä
                is_win = "‚úÖ WIN" if current_multiplier >= CASH_OUT_TARGET else "‚ùå LOSS"
                print(f"[{time.strftime('%H:%M:%S')}] New Round: {current_multiplier}X - {is_win}")
                
                # 4. ‡∑É‡∑í‡∂ú‡∑ä‡∂±‡∂Ω‡∑ä ‡∑Ä‡∑í‡∑Å‡∑ä‡∂Ω‡∑ö‡∑Ç‡∂´‡∂∫
                # historical_data ‡∑Ñ‡∑í ‡∂±‡∑Ä‡∂≠‡∂∏ ‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∂µ‡∂Ω‡∂∫ ‡∂∏‡∑î‡∂Ω‡∑í‡∂±‡∑ä‡∂∏ ‡∂á‡∂≠
                signal_message, bet_multiplier = analyze_and_generate_signal(historical_data, CASH_OUT_TARGET)
                
                # 5. ‡∑É‡∑í‡∂ú‡∑ä‡∂±‡∂Ω‡∂∫ ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏
                if signal_message:
                    full_message = (
                        f"üö® *MARTINGALE SIGNAL* üö®\n\n"
                        f"{signal_message}\n\n"
                        f"_‡∑Ä‡∂ú‡∂ö‡∑ì‡∂∏‡∑ô‡∂±‡∑ä ‡∂∫‡∑î‡∂≠‡∑î‡∑Ä ‡∂î‡∂ß‡∑ä‡∂ß‡∑î ‡∂Ö‡∂Ω‡∑ä‡∂Ω‡∂±‡∑ä‡∂±_"
                    )
                    send_telegram_message(BOT_TOKEN, CHANNEL_ID, full_message)
                
            else:
                print(f"[{time.strftime('%H:%M:%S')}] No new rounds detected.")


            # 6. ‡∂ä‡∑Ö‡∂ü ‡∑Ä‡∂ß‡∂∫ ‡∑É‡∂≥‡∑Ñ‡∑è ‡∂ª‡∑ê‡∂≥‡∑ì ‡∑É‡∑í‡∂ß‡∑ì‡∂∏
            time.sleep(10) 

        except Exception as e:
            print(f"A critical error occurred: {e}")
            time.sleep(30) # ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠‡∑í ‡∑Ä‡∑î‡∑Ä‡∑Ñ‡∑ú‡∂≠‡∑ä 30s ‡∑Ä‡∑í‡∂ª‡∑è‡∂∏‡∂∫‡∂ö‡∑ä

if __name__ == '__main__':
    main()
